/* Generated By:JavaCC: Do not edit this line. Indexer.java */
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.util.HashMap;
import java.util.Scanner;
import java.io.FileNotFoundException;
import java.io.IOException;

public class Indexer implements IndexerConstants {
        public static void main(String args []) throws ParseException, FileNotFoundException, IOException
        {
                //initialize GlobalHashTable
                int localHTsize = 3304;
                int globalHTsize = 43810;
                GlobalHashTable globalHT = new GlobalHashTable(globalHTsize);

                //input/output files/directories
                String inputDir = args[0];
                String outputDir = args[1];
                if(inputDir.charAt(inputDir.length()-1) != '/') //add forward slash if no forward slash
                        inputDir = inputDir + '/';
                if(outputDir.charAt(outputDir.length()-1) != '/')
                        outputDir = outputDir + '/';
                String dictFilename = outputDir + "dict.txt";
                String postFilename = outputDir + "post.txt";
                String mapFilename = outputDir + "map.txt";

                BufferedWriter mapFile = new BufferedWriter(new FileWriter(mapFilename)); //map printing

                //get words from stoplist and fill in stoplistHt
                String stoplistFilename = "stoplist.txt";
                HashMap<String, String> stoplistHt = new HashMap<String, String>(1000);
                populateStoplistHt(stoplistFilename, stoplistHt);

                //go through all files from input directory
                StringBuffer mapBuffer = new StringBuffer();    //stores all the doc names to write to map file
                int docID = 0;          //keeps track of which docID we're on
                File folder = new File(inputDir);
                File[] allFiles = folder.listFiles();

                for(File inFile: allFiles)
                {
                        if(inFile.isFile())
                        {
                                //reads tokens from file and stores them in localHT
                                LocalHashTable localHT = new LocalHashTable(localHTsize);
                                Indexer parser = new Indexer(new BufferedReader(new FileReader(inFile)));
                                parser.Start(localHT, stoplistHt);

                                //insert local hashtable into global hashtable
                                globalHT.Insert(docID, localHT);
                                docID++;

                                //output file to map
                                String mapOutput = String.format("%-11s", inFile.getName());
                                mapFile.write(mapOutput + "\u005cn");
                        }
                }

                //writes doc names in mapBuffer to map file
                mapFile.write(mapBuffer.toString());

                //store total number of documents in globalHT
                globalHT.setNumDocsInCollection(allFiles.length);

                //write out global hashtable to dict and post
                globalHT.Print(dictFilename, postFilename);

                //close map file
                mapFile.close();
        }

        //fills a hashtable from the stoplist
        public static void populateStoplistHt(String filename, HashMap<String, String> ht)
        {
                try {
                        Scanner in = new Scanner(new FileReader(filename));

                        while(in.hasNextLine())
                                ht.put(in.nextLine().toLowerCase(), "");

                        in.close();
                } catch (FileNotFoundException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                }
        }

//read tokens and appends them to buffer
  final public void Start(LocalHashTable ht, HashMap<String, String> stoplistHt) throws ParseException {
        Token t;
        String a;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHONE_NUM:
      case URL:
      case NUM_SLASH:
      case TEXT:
      case FORMATTED_TEXT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHONE_NUM:
      case NUM_SLASH:
      case TEXT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEXT:
          t = jj_consume_token(TEXT);
          break;
        case PHONE_NUM:
          t = jj_consume_token(PHONE_NUM);
          break;
        case NUM_SLASH:
          t = jj_consume_token(NUM_SLASH);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                a = t.image.toLowerCase();
                                if(!stoplistHt.containsKey(a))
                                        ht.Insert(a);
        break;
      case FORMATTED_TEXT:
        t = jj_consume_token(FORMATTED_TEXT);
                                a = t.image.toLowerCase();
                                a = a.replaceAll("<.*?>", "");
                                if(!stoplistHt.containsKey(a))
                                        ht.Insert(a);
        break;
      case URL:
        t = jj_consume_token(URL);
                                a = t.image;
                                if(!stoplistHt.containsKey(a))
                                        ht.Insert(a);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  /** Generated Token Manager. */
  public IndexerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x11e00000,0x1a00000,0x11e00000,};
   }

  /** Constructor with InputStream. */
  public Indexer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Indexer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IndexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Indexer(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IndexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Indexer(IndexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(IndexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
